{\rtf1\ansi\ansicpg1250\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 1.Kompilacja programu\
gcc `pkg-config --cflags gtk+-3.0` projectCore.c coreFuncs.c chessFuncs.c -o project `pkg-config --libs gtk+-3.0`\
\
2.Uruchomienie programu\
./project\
\
3.coreFuncs.h\
Deklaracja funkcji og\'f3lnodost\uc0\u281 pnych funkcji dla ka\u380 dego modu\u322 u\
Struct pool - struktura opisujaca pole szachownicy\
Struct pair - para int\'f3w (wykorzystywana do zapisu kordynat p\'f3l)\
initGtk - funkcja inicjalizujaca interfejs graficzny\
checkWhichFigureIsIt - funkcja uruchamiana przy klikni\uc0\u281 ciu na pole szachownicy, znajduj\u261 ca potencjalne pola gdzie klikni\u281 ta figura mo\u380 e si\u281  ruszy\u263 , kordynaty p\'f3l s\u261  zapisywane do przekazanej tablicy pt. possibleMoveCordinates\
TransformPawn - zmiana Pionka na hetmana\
checkPromotion - funkcja sprawdzaj\uc0\u261 ca czy pion powinnien by\u263  zmieniony na hetmana\
checkAndSendData - funkcja sprawdzaj\uc0\u261 ca wyst\u281 powanie specjalnych ruch\'f3w (roszada,bicie w przelocie) i aktualizuj\u261 ca dane takie jak czy kr\'f3l ju\u380  sie ruszy\u322 \
\
4.coreFuncs.c\
\
a)Zmienne\
ChoosedFigure - zmienna boolowska czy figura zosta\uc0\u322 a wybrana\
WhiteTurn - zmienna boolowska czyja tura jest aktualnie\
ChoosenFigure - wybrana figura ktora bedziemy sie ruszac (dane o niej)\
GameRecord - plik do ktorego zapisujemy partie\
possibleMovesCordinates - tablica potencjalnych kordynat na ktore moze sie ruszyc wybrana figura\
Chessboard - glowna struktura reprezentujaca aktualny stan gry\
mainWindow - glowne okno programu\
\
b)Funkcje\
selectImageFromChar - funkcja zwracaj\uc0\u261 ca odpowiedni obrazek dla pola i figury na nim stoj\u261 cej s\u322 u\u380 \u261 ca do znajdowania odpowiedniego obrazku dla guzika\
selectRightHighlight - funkcja zwracajaca odpowiedni obrazek podswietlenia pola dla figury\
TransformPawn - zmiana pionka na hetmana\
changeButtonLabel - graficzne wykonanie ruchu, zmienia informacje w chessboard i aktualizuje obrazki reperezntujace stan gry\
extraChangeButtonLabel - jezeli ruch jest specjalny (wymaga oprocz zmiany pozycji jednej figury jeszcze zmiany w pozycji drugiej) to dana funkcja wykonuje ta dodatkowa zmiane\
highlighPossibleMoveCordinates - podswietla potencjalne pola gdzie mozemy sie ruszyc figura\
returnButtonsToNormalState - cofa podswietlenie wszystkich pol do stanu normalnego\
displayPossibleMoves - funkcja wywolujaca checkWhichFigureIsIt (sprawdzenie i zapisanie do possibleMovesCordinates potencjalnych ruchow figury) oraz podswietlenie pol gdzie mozemy sie ruszyc\
checkIfRightChoose - funckja sprawdzajaca czy pole na ktore chcemy sie ruszych jest dla nas dostepne (mozemy tam wykonac ruch)\
cancelMove - cofniecie zaznaczenia figury\
newGame - uruchomienie nowej gry\
endGame - zakonczenie gry i wylaczenie programu\
moveCheck - funckja wywolywana przez nacisniecie dowolnego pola na szachownicy,przy pierwszym kliknieciu sprawdza dostepne ruchy dla kliknietej figury a przy drugim przesuwa ja na wskazane pole\
initGtk - inicjalizacja interfejsu graficznego\
\
5.chessFuncs.c\
a) Zmienne\
KnightMoves,KingMoves - ruchy krola i skoczka\
EnPassant,KingHasMoved,WhiteRookHasMoved,BlackRookHasMoved - zmienne boolowskie odpowiadajace czy dana figura sie ruszyla (x - lewa wieza,y-prawa wieza,x-bialy krol,y-czarny krol a w wypadku EnPassant wspolrzedne pola gdzie pion ruszyl sie o dwa pola)\
Counter - ktore pole w possibleMovesCordinates wpisywac potencjalne kordynaty\
\
B)Funkcje\
ifOutOfChessboard - czy figura wychodzi za szachownice\
isWhiteFigure - funkcja sprawdzajaca czy dane pole ma na sobie biala figure\
isBlackFigure - jak wyzej tylko czarna\
BlackFigureCheckingHelper,WhiteFigureCheckingHelper - funkcja sprawdzajaca czy bijemy krola przeciwnego koloru\
Black\'85Checking,White\'85Checking - funkcje sprawdzajace czy dana figura (blackRookChecking to czy czarny goniec) szachuje krola przeciwnego koloru\
ifBlackFigure - sprawdzenie czy wskazane pole ma na sobie czarna figure i wywolujace sprawdzenie szachowania dla niej\
ifWhiteFigure - sprawdzenie czy wskazane pole ma na sobie biala figure i wywoluje sprawdzenie szachowania dla niej\
ifIsInCheck - wywoluje sprawdzenie szachowania dla kazdego pola szachownicy na ktorym jest figura odpowiedniego koloru\
createFakeChessboard - tworzy szachownice na ktorej bedzie sprawdzane czy ruch powoduje szachowanie\
BlackFigureHelper,WhiteFigureHelper - funkcje pomocnicze dla figur\
White\'85,Black\'85 - funkcje ktore sprawdzaja czy dana figura moze ruszyc sie na jakies pole (dostepne wg zasad ruchu dana figura)\
checkWhichFigureIsIt - sprawdzenie ktora figura chce ruszyc sie gracz i wywolanie dla niej odpowiedniej funkcji zwracajacej dostepne pola dla figury\
Update\'85 - zapisuje dane potrzebne do specjalnych ruchow (typu bicie w przelocie,roszada)\
checkAndSendData - funkcja wywolywana w pliku coreFuncs sluzaca do zapisania informacji potrzebnych do zdecydowania czy ruch specjalny (bicie w przelocie,roszada) moze zostac wykonany w przyszlosci\
}